for (i in 2:nrow(files)) {
impoPath <- files[i,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[i,1]]
impoFile[,Prefijo:=files[i,2]]
impoFile[,Modelo:=files[i,3]]
impoFile[,Iteracion:=files[i,4]]
impoData <- rbind(impoData,impoFile)
}
impoData
test <- impoData[numero_de_cliente=31116053,.(numero_de_cliente,prob)]
test <- impoData[numero_de_cliente==31116053,.(numero_de_cliente,prob)]
test
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
)
,by = .(numero_de_cliente)]
dataEnsemble
test <- impoData[numero_de_cliente==31116053,.(numero_de_cliente,prob)]
test
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
)
,by = .(numero_de_cliente)]
dataEnsemble
test <- impoData[numero_de_cliente==31116053,.(numero_de_cliente,prob)]
test
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
,probCount = .N
)
,by = .(numero_de_cliente)]
dataEnsemble
test <- impoData[numero_de_cliente==31116053,.(numero_de_cliente,prob)]
test
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
,probCount = .N
,probFinal = sum(prob)/.N
)
,by = .(numero_de_cliente)]
dataEnsemble
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
files <- list.files(full.names = TRUE, recursive = TRUE, pattern = 'pred*')
files <- as.data.frame(files)
colnames(files) <- "fullPath"
files
files$Prefijo   <- str_split(files$fullPath, '_', simplify = TRUE)[,1]
files$Modelo    <- str_split(files$fullPath, '_', simplify = TRUE)[,2]
files$Iteracion <- str_split(files$fullPath, '_', simplify = TRUE)[,3]
setDT(files)[, Prefijo := str_replace(Prefijo, "./", "")]
setDT(files)[, Iteracion := str_replace(Iteracion, ".csv", "")]
files
impoPath <- files[1,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[1,1]]
impoFile[,Prefijo:=files[1,2]]
impoFile[,Modelo:=files[1,3]]
impoFile[,Iteracion:=files[1,4]]
impoData <- impoFile
for (i in 2:nrow(files)) {
impoPath <- files[i,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[i,1]]
impoFile[,Prefijo:=files[i,2]]
impoFile[,Modelo:=files[i,3]]
impoFile[,Iteracion:=files[i,4]]
impoData <- rbind(impoData,impoFile)
}
impoData
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
,probCount = .N
,probFinal = sum(prob)/.N
)
,by = .(numero_de_cliente)]
dataEnsemble
fwrite(dataEnsemble, file = "dataEnsamble.csv")
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM$kaggle$envios_desde  <-  8000L
GenerarKaggle  <- function( tb_prediccion, modelo_rank, iteracion_bayesiana )
{
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( tb_prediccion, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
tb_prediccion[ , Predicted := 0L ]
tb_prediccion[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Ensemble",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( tb_prediccion[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
```
GenerarKaggle  <- function( tb_prediccion, modelo_rank, iteracion_bayesiana )
{
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( tb_prediccion, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
tb_prediccion[ , Predicted := 0L ]
tb_prediccion[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Ensemble",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( tb_prediccion[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
```
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM$kaggle$envios_desde  <-  8000L
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM$kaggle$envios_desde  <-  8000L
GenerarKaggle  <- function( tb_prediccion)
{
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( tb_prediccion, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
tb_prediccion[ , Predicted := 0L ]
tb_prediccion[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Ensemble",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( tb_prediccion[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
GenerarKaggle  <- function( tb_prediccion)
{
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( tb_prediccion, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
tb_prediccion[ , Predicted := 0L ]
tb_prediccion[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Ensemble",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( tb_prediccion[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
}
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM$kaggle$envios_desde  <-  8000L
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
PARAM  <- list()
PARAM$kaggle$envios_desde  <-  8000L
PARAM$kaggle$envios_hasta  <- 13500L
PARAM$kaggle$envios_salto  <-   500L
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM  <- list()
PARAM$kaggle$envios_desde  <-  8000L
PARAM$kaggle$envios_hasta  <- 13500L
PARAM$kaggle$envios_salto  <-   500L
files <- list.files(full.names = TRUE, recursive = TRUE, pattern = 'pred*')
files <- as.data.frame(files)
colnames(files) <- "fullPath"
files
files$Prefijo   <- str_split(files$fullPath, '_', simplify = TRUE)[,1]
files$Modelo    <- str_split(files$fullPath, '_', simplify = TRUE)[,2]
files$Iteracion <- str_split(files$fullPath, '_', simplify = TRUE)[,3]
setDT(files)[, Prefijo := str_replace(Prefijo, "./", "")]
setDT(files)[, Iteracion := str_replace(Iteracion, ".csv", "")]
files
impoPath <- files[1,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[1,1]]
impoFile[,Prefijo:=files[1,2]]
impoFile[,Modelo:=files[1,3]]
impoFile[,Iteracion:=files[1,4]]
impoData <- impoFile
for (i in 2:nrow(files)) {
impoPath <- files[i,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[i,1]]
impoFile[,Prefijo:=files[i,2]]
impoFile[,Modelo:=files[i,3]]
impoFile[,Iteracion:=files[i,4]]
impoData <- rbind(impoData,impoFile)
}
impoData
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
,probCount = .N
,probFinal = sum(prob)/.N
)
,by = .(numero_de_cliente)]
dataEnsemble
fwrite(dataEnsemble, file = "dataEnsamble.csv")
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
cortes
dataEnsemble
setorderv( dataEnsemble, c(campo), c(-1) )
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( dataEnsemble, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
dataEnsemble[ , Predicted := 0L ]
dataEnsemble[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Ensemble",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( dataEnsemble[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM  <- list()
PARAM$kaggle$envios_desde  <-  8000L
PARAM$kaggle$envios_hasta  <- 13500L
PARAM$kaggle$envios_salto  <-   500L
files <- list.files(full.names = TRUE, recursive = TRUE, pattern = 'pred*')
files <- as.data.frame(files)
colnames(files) <- "fullPath"
files
files$Prefijo   <- str_split(files$fullPath, '_', simplify = TRUE)[,1]
files$Modelo    <- str_split(files$fullPath, '_', simplify = TRUE)[,2]
files$Iteracion <- str_split(files$fullPath, '_', simplify = TRUE)[,3]
setDT(files)[, Prefijo := str_replace(Prefijo, "./", "")]
setDT(files)[, Iteracion := str_replace(Iteracion, ".csv", "")]
files
impoPath <- files[1,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[1,1]]
impoFile[,Prefijo:=files[1,2]]
impoFile[,Modelo:=files[1,3]]
impoFile[,Iteracion:=files[1,4]]
impoData <- impoFile
for (i in 2:nrow(files)) {
impoPath <- files[i,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[i,1]]
impoFile[,Prefijo:=files[i,2]]
impoFile[,Modelo:=files[i,3]]
impoFile[,Iteracion:=files[i,4]]
impoData <- rbind(impoData,impoFile)
}
impoData
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
,probCount = .N
,probFinal = sum(prob)/.N
)
,by = .(numero_de_cliente)]
dataEnsemble
fwrite(dataEnsemble, file = "dataEnsemble.csv")
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( dataEnsemble, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
dataEnsemble[ , Predicted := 0L ]
dataEnsemble[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Ensemble_",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( dataEnsemble[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
fwrite(dataEnsemble, file = "Kaggle/dataEnsemble.csv")
fwrite(dataEnsemble, file = "./Kaggle/dataEnsemble.csv")
dir.create( paste0( "Kaggle"), showWarnings= FALSE )
fwrite(dataEnsemble, file = "Kaggle/dataEnsemble.csv")
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( dataEnsemble, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
dataEnsemble[ , Predicted := 0L ]
dataEnsemble[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Kaggle/Ensemble_",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( dataEnsemble[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
knitr::opts_chunk$set(echo = TRUE)
rm( list= ls(all.names= TRUE) )  #remove all objects
gc( full= TRUE )                 #garbage collection
#library(ggplot2)
library(data.table)
#library(gridExtra)
#library(ragg)
#library(tidyr)
library(stringr)
setwd('D:/Onedrive/Austral/Cursos/08 - Laboratorio de Implementacion 1/labo2023v/src/wf-wal-final-3/Pred')
getwd()
PARAM  <- list()
PARAM$kaggle$envios_desde  <-  8000L
PARAM$kaggle$envios_hasta  <- 13500L
PARAM$kaggle$envios_salto  <-   500L
files <- list.files(full.names = TRUE, recursive = TRUE, pattern = 'pred*')
files <- as.data.frame(files)
colnames(files) <- "fullPath"
files
files$Prefijo   <- str_split(files$fullPath, '_', simplify = TRUE)[,1]
files$Modelo    <- str_split(files$fullPath, '_', simplify = TRUE)[,2]
files$Iteracion <- str_split(files$fullPath, '_', simplify = TRUE)[,3]
setDT(files)[, Prefijo := str_replace(Prefijo, "./", "")]
setDT(files)[, Iteracion := str_replace(Iteracion, ".csv", "")]
files
impoPath <- files[1,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[1,1]]
impoFile[,Prefijo:=files[1,2]]
impoFile[,Modelo:=files[1,3]]
impoFile[,Iteracion:=files[1,4]]
impoData <- impoFile
for (i in 2:nrow(files)) {
impoPath <- files[i,]$fullPath
impoFile <- fread(impoPath)
impoFile[,Path:=files[i,1]]
impoFile[,Prefijo:=files[i,2]]
impoFile[,Modelo:=files[i,3]]
impoFile[,Iteracion:=files[i,4]]
impoData <- rbind(impoData,impoFile)
}
impoData
dataEnsemble <- impoData[ ,
.(probTotal = sum(prob)
,probMax = max(prob)
,probMin = min(prob)
,probCount = .N
,probFinal = sum(prob)/.N
)
,by = .(numero_de_cliente)]
dataEnsemble
dir.create( paste0( "Kaggle"), showWarnings= FALSE )
fwrite(dataEnsemble, file = "Kaggle/dataEnsemble.csv")
# genero el vector de cortes
cortes  <- seq( from=  PARAM$kaggle$envios_desde,
to=    PARAM$kaggle$envios_hasta,
by=    PARAM$kaggle$envios_salto )
# genero los archivos por probabilidad
for( campo  in  c( "probFinal" ) )
{
setorderv( dataEnsemble, c(campo), c(-1) )
# grabo los archivos para cada corte
for( corte in cortes )
{
dataEnsemble[ , Predicted := 0L ]
dataEnsemble[ 1:corte, Predicted := 1L ]
nom_submit  <- paste0( "Kaggle/Ensemble_",
sprintf( "%05d", corte ),
substr( campo, 1, 1),
".csv" )
fwrite( dataEnsemble[ , list( numero_de_cliente, Predicted ) ],
file= nom_submit,
sep= "," )
}
}
